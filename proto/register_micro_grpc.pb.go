// Code generated by protoc-gen-micro
// source: register.proto
package service

import (
	"context"

	micro_client "github.com/unistack-org/micro/v3/client"
	micro_server "github.com/unistack-org/micro/v3/server"
)

var (
	_ micro_server.Option
	_ micro_client.Option
)

type registerService struct {
	c    micro_client.Client
	name string
}

// Micro client stuff

// NewRegisterService create new service client
func NewRegisterService(name string, c micro_client.Client) RegisterService {
	return &registerService{c: c, name: name}
}

func (c *registerService) LookupService(ctx context.Context, req *LookupRequest, opts ...micro_client.CallOption) (*LookupResponse, error) {
	rsp := &LookupResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Register.LookupService", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *registerService) Register(ctx context.Context, req *Service, opts ...micro_client.CallOption) (*EmptyResponse, error) {
	rsp := &EmptyResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Register.Register", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *registerService) Deregister(ctx context.Context, req *Service, opts ...micro_client.CallOption) (*EmptyResponse, error) {
	rsp := &EmptyResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Register.Deregister", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *registerService) ListServices(ctx context.Context, req *ListRequest, opts ...micro_client.CallOption) (*ListResponse, error) {
	rsp := &ListResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Register.ListServices", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *registerService) Watch(ctx context.Context, req *WatchRequest, opts ...micro_client.CallOption) (Register_WatchService, error) {
	stream, err := c.c.Stream(ctx, c.c.NewRequest(c.name, "Register.Watch", &WatchRequest{}), opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(req); err != nil {
		return nil, err
	}
	return &registerServiceWatch{stream}, nil
}

type registerServiceWatch struct {
	stream micro_client.Stream
}

func (x *registerServiceWatch) Close() error {
	return x.stream.Close()
}

func (x *registerServiceWatch) Context() context.Context {
	return x.stream.Context()
}

func (x *registerServiceWatch) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *registerServiceWatch) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *registerServiceWatch) Recv() (*Result, error) {
	m := &Result{}
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
} // Micro server stuff

type registerHandler struct {
	RegisterHandler
}

func (h *registerHandler) LookupService(ctx context.Context, req *LookupRequest, rsp *LookupResponse) error {
	return h.RegisterHandler.LookupService(ctx, req, rsp)
}

func (h *registerHandler) Register(ctx context.Context, req *Service, rsp *EmptyResponse) error {
	return h.RegisterHandler.Register(ctx, req, rsp)
}

func (h *registerHandler) Deregister(ctx context.Context, req *Service, rsp *EmptyResponse) error {
	return h.RegisterHandler.Deregister(ctx, req, rsp)
}

func (h *registerHandler) ListServices(ctx context.Context, req *ListRequest, rsp *ListResponse) error {
	return h.RegisterHandler.ListServices(ctx, req, rsp)
}

func (h *registerHandler) Watch(ctx context.Context, stream micro_server.Stream) error {
	m := &WatchRequest{}
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RegisterHandler.Watch(ctx, m, &registerWatchStream{stream})
}

type registerWatchStream struct {
	stream micro_server.Stream
}

func (x *registerWatchStream) Close() error {
	return x.stream.Close()
}

func (x *registerWatchStream) Context() context.Context {
	return x.stream.Context()
}

func (x *registerWatchStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *registerWatchStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}
func (x *registerWatchStream) Send(m *Result) error {
	return x.stream.Send(m)
}
